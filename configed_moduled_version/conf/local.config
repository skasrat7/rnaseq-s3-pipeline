// Local execution configuration for EC2 instance

params {
    config_profile_name = 'Local EC2'
    config_profile_description = 'Local execution profile for EC2 instance'
}

process {
    // Use local executor instead of awsbatch
    executor = 'local'
    
    // Resource limits for your EC2 instance. Change based on your needs.
    cpus = { check_max(8, 'cpus') }
    memory = { check_max(32.GB * task.attempt, 'memory') }
    time = { check_max(24.h * task.attempt, 'time') }
    
    // Error handling
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 2
    maxErrors = '-1'
    
    // Specific resource allocations for heavy processes
    withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN' {
        cpus = { check_max(8, 'cpus') }
        memory = { check_max(48.GB * task.attempt, 'memory') }
        time = { check_max(8.h * task.attempt, 'time') }
    }
    
    withName: 'NFCORE_RNASEQ:RNASEQ:PREPARE_GENOME:STAR_GENOMEGENERATE' {
        cpus = { check_max(8, 'cpus') }
        memory = { check_max(64.GB * task.attempt, 'memory') }
        time = { check_max(12.h * task.attempt, 'time') }
    }
    
    withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_SALMON:SALMON_QUANT' {
        cpus = { check_max(4, 'cpus') }
        memory = { check_max(16.GB * task.attempt, 'memory') }
        time = { check_max(4.h * task.attempt, 'time') }
    }
}

// Function to ensure that resource requirements don't go beyond available resources
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}